--- a/optifine/Differ.java
+++ b/optifine/Differ.java
@@ -1,71 +1,50 @@
 package optifine;
 
-import java.io.ByteArrayInputStream;
-import java.io.ByteArrayOutputStream;
-import java.io.DataOutputStream;
-import java.io.File;
-import java.io.FileOutputStream;
-import java.io.IOException;
-import java.io.InputStream;
+import optifine.xdelta.Delta;
+import optifine.xdelta.DeltaException;
+import optifine.xdelta.DiffWriter;
+import optifine.xdelta.GDiffWriter;
+
+import java.io.*;
+import java.nio.charset.StandardCharsets;
 import java.security.NoSuchAlgorithmException;
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.Enumeration;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
+import java.util.*;
 import java.util.regex.Pattern;
 import java.util.zip.ZipEntry;
 import java.util.zip.ZipFile;
 import java.util.zip.ZipOutputStream;
-import optifine.xdelta.Delta;
-import optifine.xdelta.DeltaException;
-import optifine.xdelta.DiffWriter;
-import optifine.xdelta.GDiffWriter;
 
-public class Differ
-{
-    public static void main(String[] args)
-    {
-        if (args.length < 3)
-        {
+public class Differ {
+    public static void main(String[] args) {
+        if (args.length < 3) {
             Utils.dbg("Usage: Differ <base.jar> <mod.jar> <diff.jar>");
-        }
-        else
-        {
+        } else {
             File file1 = new File(args[0]);
             File file2 = new File(args[1]);
             File file3 = new File(args[2]);
 
-            try
-            {
-                if (file1.getName().equals("AUTO"))
-                {
+            try {
+                if (file1.getName().equals("AUTO")) {
                     file1 = detectBaseFile(file2);
                 }
 
-                if (!file1.exists() || !file1.isFile())
-                {
+                if (!file1.exists() || !file1.isFile()) {
                     throw new IOException("Base file not found: " + file1);
                 }
 
-                if (!file2.exists() || !file2.isFile())
-                {
+                if (!file2.exists() || !file2.isFile()) {
                     throw new IOException("Mod file not found: " + file2);
                 }
 
                 process(file1, file2, file3);
-            }
-            catch (Exception exception)
-            {
+            } catch (Exception exception) {
                 exception.printStackTrace();
                 System.exit(1);
             }
         }
     }
 
-    private static void process(File baseFile, File modFile, File diffFile) throws IOException, DeltaException, NoSuchAlgorithmException
-    {
+    private static void process(File baseFile, File modFile, File diffFile) throws IOException, DeltaException, NoSuchAlgorithmException {
         ZipFile zipfile = new ZipFile(modFile);
         Map<String, String> map = Patcher.getConfigurationMap(zipfile);
         Pattern[] apattern = Patcher.getConfigurationPatterns(map);
@@ -74,19 +53,16 @@
         Enumeration enumeration = zipfile.entries();
         Map<String, Map<String, Integer>> map1 = new HashMap<>();
 
-        while (enumeration.hasMoreElements())
-        {
-            ZipEntry zipentry = (ZipEntry)enumeration.nextElement();
+        while (enumeration.hasMoreElements()) {
+            ZipEntry zipentry = (ZipEntry) enumeration.nextElement();
 
-            if (!zipentry.isDirectory())
-            {
+            if (!zipentry.isDirectory()) {
                 InputStream inputstream = zipfile.getInputStream(zipentry);
                 byte[] abyte = Utils.readAll(inputstream);
                 String s = zipentry.getName();
                 byte[] abyte1 = makeDiff(s, abyte, apattern, map, zipfile1);
 
-                if (abyte1 != abyte)
-                {
+                if (abyte1 != abyte) {
                     ZipEntry zipentry1 = new ZipEntry("patch/" + s + ".xdelta");
                     zipoutputstream.putNextEntry(zipentry1);
                     zipoutputstream.write(abyte1);
@@ -94,14 +70,12 @@
                     addStat(map1, s, "delta");
                     byte[] abyte2 = HashUtils.getHashMd5(abyte);
                     String s1 = HashUtils.toHexString(abyte2);
-                    byte[] abyte3 = s1.getBytes("ASCII");
+                    byte[] abyte3 = s1.getBytes(StandardCharsets.US_ASCII);
                     ZipEntry zipentry2 = new ZipEntry("patch/" + s + ".md5");
                     zipoutputstream.putNextEntry(zipentry2);
                     zipoutputstream.write(abyte3);
                     zipoutputstream.closeEntry();
-                }
-                else
-                {
+                } else {
                     ZipEntry zipentry3 = new ZipEntry(s);
                     zipoutputstream.putNextEntry(zipentry3);
                     zipoutputstream.write(abyte);
@@ -115,24 +89,20 @@
         printStats(map1);
     }
 
-    private static void printStats(Map<String, Map<String, Integer>> mapStats)
-    {
+    private static void printStats(Map<String, Map<String, Integer>> mapStats) {
         List<String> list = new ArrayList<>(mapStats.keySet());
         Collections.sort(list);
 
-        for (String s : list)
-        {
+        for (String s : list) {
             Map<String, Integer> map = mapStats.get(s);
             List<String> list1 = new ArrayList<>(map.keySet());
             Collections.sort(list1);
             String s1 = "";
 
-            for (String s2 : list1)
-            {
+            for (String s2 : list1) {
                 Integer integer = map.get(s2);
 
-                if (s1.length() > 0)
-                {
+                if (s1.length() > 0) {
                     s1 = s1 + ", ";
                 }
 
@@ -143,28 +113,24 @@
         }
     }
 
-    private static void addStat(Map<String, Map<String, Integer>> mapStats, String name, String type)
-    {
+    private static void addStat(Map<String, Map<String, Integer>> mapStats, String name, String type) {
         int i = name.lastIndexOf(47);
         String s = "";
 
-        if (i >= 0)
-        {
+        if (i >= 0) {
             s = name.substring(0, i);
         }
 
         Map<String, Integer> map = mapStats.get(s);
 
-        if (map == null)
-        {
+        if (map == null) {
             map = new HashMap<>();
             mapStats.put(s, map);
         }
 
         Integer integer = map.get(type);
 
-        if (integer == null)
-        {
+        if (integer == null) {
             integer = new Integer(0);
         }
 
@@ -172,24 +138,17 @@
         map.put(type, integer);
     }
 
-    public static byte[] makeDiff(String name, byte[] bytesMod, Pattern[] patterns, Map<String, String> cfgMap, ZipFile zipBase) throws IOException, DeltaException
-    {
+    public static byte[] makeDiff(String name, byte[] bytesMod, Pattern[] patterns, Map<String, String> cfgMap, ZipFile zipBase) throws IOException, DeltaException {
         String s = Patcher.getPatchBase(name, patterns, cfgMap);
 
-        if (s == null)
-        {
+        if (s == null) {
             return bytesMod;
-        }
-        else
-        {
+        } else {
             ZipEntry zipentry = zipBase.getEntry(s);
 
-            if (zipentry == null)
-            {
+            if (zipentry == null) {
                 throw new IOException("Base entry not found: " + s + " in: " + zipBase.getName());
-            }
-            else
-            {
+            } else {
                 InputStream inputstream = zipBase.getInputStream(zipentry);
                 byte[] abyte = Utils.readAll(inputstream);
                 ByteArrayInputStream bytearrayinputstream = new ByteArrayInputStream(bytesMod);
@@ -202,26 +161,19 @@
         }
     }
 
-    public static File detectBaseFile(File modFile) throws IOException
-    {
+    public static File detectBaseFile(File modFile) throws IOException {
         ZipFile zipfile = new ZipFile(modFile);
         String s = Installer.getOptiFineVersion(zipfile);
 
-        if (s == null)
-        {
+        if (s == null) {
             throw new IOException("Version not found");
-        }
-        else
-        {
+        } else {
             zipfile.close();
             String s1 = Installer.getMinecraftVersionFromOfVersion(s);
 
-            if (s1 == null)
-            {
+            if (s1 == null) {
                 throw new IOException("Version not found");
-            }
-            else
-            {
+            } else {
                 File file1 = Utils.getWorkingDirectory();
                 File file2 = new File(file1, "versions/" + s1 + "/" + s1 + ".jar");
                 Utils.dbg("BaseFile: " + file2);
