--- a/optifine/Patcher.java
+++ b/optifine/Patcher.java
@@ -1,11 +1,10 @@
 package optifine;
 
-import java.io.ByteArrayInputStream;
-import java.io.ByteArrayOutputStream;
-import java.io.File;
-import java.io.FileOutputStream;
-import java.io.IOException;
-import java.io.InputStream;
+import optifine.xdelta.GDiffPatcher;
+import optifine.xdelta.PatchException;
+
+import java.io.*;
+import java.nio.charset.StandardCharsets;
 import java.util.Enumeration;
 import java.util.LinkedHashMap;
 import java.util.Map;
@@ -14,11 +13,8 @@
 import java.util.zip.ZipEntry;
 import java.util.zip.ZipFile;
 import java.util.zip.ZipOutputStream;
-import optifine.xdelta.GDiffPatcher;
-import optifine.xdelta.PatchException;
 
-public class Patcher
-{
+public class Patcher {
     public static final String CONFIG_FILE = "patch.cfg";
     public static final String CONFIG_FILE2 = "patch2.cfg";
     public static final String CONFIG_FILE3 = "patch3.cfg";
@@ -26,43 +22,31 @@
     public static final String SUFFIX_DELTA = ".xdelta";
     public static final String SUFFIX_MD5 = ".md5";
 
-    public static void main(String[] args) throws Exception
-    {
-        if (args.length < 3)
-        {
+    public static void main(String[] args) throws Exception {
+        if (args.length < 3) {
             Utils.dbg("Usage: Patcher <base.jar> <diff.jar> <mod.jar>");
-        }
-        else
-        {
+        } else {
             File file1 = new File(args[0]);
             File file2 = new File(args[1]);
             File file3 = new File(args[2]);
 
-            if (file1.getName().equals("AUTO"))
-            {
+            if (file1.getName().equals("AUTO")) {
                 file1 = Differ.detectBaseFile(file2);
             }
 
-            if (file1.exists() && file1.isFile())
-            {
-                if (file2.exists() && file2.isFile())
-                {
+            if (file1.exists() && file1.isFile()) {
+                if (file2.exists() && file2.isFile()) {
                     process(file1, file2, file3);
-                }
-                else
-                {
+                } else {
                     throw new IOException("Diff file not found: " + file3);
                 }
-            }
-            else
-            {
+            } else {
                 throw new IOException("Base file not found: " + file1);
             }
         }
     }
 
-    public static void process(File baseFile, File diffFile, File modFile) throws Exception
-    {
+    public static void process(File baseFile, File diffFile, File modFile) throws Exception {
         ZipFile zipfile = new ZipFile(diffFile);
         Map<String, String> map = getConfigurationMap(zipfile);
         Pattern[] apattern = getConfigurationPatterns(map);
@@ -71,30 +55,26 @@
         ZipResourceProvider zipresourceprovider = new ZipResourceProvider(zipfile1);
         Enumeration enumeration = zipfile.entries();
 
-        while (enumeration.hasMoreElements())
-        {
-            ZipEntry zipentry = (ZipEntry)enumeration.nextElement();
+        while (enumeration.hasMoreElements()) {
+            ZipEntry zipentry = (ZipEntry) enumeration.nextElement();
             InputStream inputstream = zipfile.getInputStream(zipentry);
             byte[] abyte = Utils.readAll(inputstream);
             String s = zipentry.getName();
 
-            if (s.startsWith("patch/") && s.endsWith(".xdelta"))
-            {
+            if (s.startsWith("patch/") && s.endsWith(".xdelta")) {
                 s = s.substring("patch/".length());
                 s = s.substring(0, s.length() - ".xdelta".length());
                 byte[] abyte3 = applyPatch(s, abyte, apattern, map, zipresourceprovider);
                 String s1 = "patch/" + s + ".md5";
                 ZipEntry zipentry2 = zipfile.getEntry(s1);
 
-                if (zipentry2 != null)
-                {
+                if (zipentry2 != null) {
                     byte[] abyte1 = Utils.readAll(zipfile.getInputStream(zipentry2));
-                    String s2 = new String(abyte1, "ASCII");
+                    String s2 = new String(abyte1, StandardCharsets.US_ASCII);
                     byte[] abyte2 = HashUtils.getHashMd5(abyte3);
                     String s3 = HashUtils.toHexString(abyte2);
 
-                    if (!s2.equals(s3))
-                    {
+                    if (!s2.equals(s3)) {
                         throw new Exception("MD5 not matching, name: " + s + ", saved: " + s2 + ", patched: " + s3);
                     }
                 }
@@ -104,9 +84,7 @@
                 zipoutputstream.write(abyte3);
                 zipoutputstream.closeEntry();
                 Utils.dbg("Mod: " + s);
-            }
-            else if (!s.startsWith("patch/") || !s.endsWith(".md5"))
-            {
+            } else if (!s.startsWith("patch/") || !s.endsWith(".md5")) {
                 ZipEntry zipentry1 = new ZipEntry(s);
                 zipoutputstream.putNextEntry(zipentry1);
                 zipoutputstream.write(abyte);
@@ -118,25 +96,18 @@
         zipoutputstream.close();
     }
 
-    public static byte[] applyPatch(String name, byte[] bytesDiff, Pattern[] patterns, Map<String, String> cfgMap, IResourceProvider resourceProvider) throws IOException, PatchException
-    {
+    public static byte[] applyPatch(String name, byte[] bytesDiff, Pattern[] patterns, Map<String, String> cfgMap, IResourceProvider resourceProvider) throws IOException, PatchException {
         name = Utils.removePrefix(name, "/");
         String s = getPatchBase(name, patterns, cfgMap);
 
-        if (s == null)
-        {
+        if (s == null) {
             throw new IOException("No patch base, name: " + name + ", patterns: " + Utils.arrayToCommaSeparatedString(patterns));
-        }
-        else
-        {
+        } else {
             InputStream inputstream = resourceProvider.getResourceStream(s);
 
-            if (inputstream == null)
-            {
+            if (inputstream == null) {
                 throw new IOException("Base resource not found: " + s);
-            }
-            else
-            {
+            } else {
                 byte[] abyte = Utils.readAll(inputstream);
                 InputStream inputstream1 = new ByteArrayInputStream(bytesDiff);
                 ByteArrayOutputStream bytearrayoutputstream = new ByteArrayOutputStream();
@@ -147,13 +118,11 @@
         }
     }
 
-    public static Pattern[] getConfigurationPatterns(Map<String, String> cfgMap)
-    {
+    public static Pattern[] getConfigurationPatterns(Map<String, String> cfgMap) {
         String[] astring = cfgMap.keySet().toArray(new String[0]);
         Pattern[] apattern = new Pattern[astring.length];
 
-        for (int i = 0; i < astring.length; ++i)
-        {
+        for (int i = 0; i < astring.length; ++i) {
             String s = astring[i];
             apattern[i] = Pattern.compile(s);
         }
@@ -161,8 +130,7 @@
         return apattern;
     }
 
-    public static Map<String, String> getConfigurationMap(ZipFile modZip) throws IOException
-    {
+    public static Map<String, String> getConfigurationMap(ZipFile modZip) throws IOException {
         Map<String, String> map = getConfigurationMap(modZip, "patch.cfg");
         Map<String, String> map1 = getConfigurationMap(modZip, "patch2.cfg");
         Map<String, String> map2 = getConfigurationMap(modZip, "patch3.cfg");
@@ -171,38 +139,24 @@
         return map;
     }
 
-    public static Map<String, String> getConfigurationMap(ZipFile modZip, String pathConfig) throws IOException
-    {
+    public static Map<String, String> getConfigurationMap(ZipFile modZip, String pathConfig) throws IOException {
         Map<String, String> map = new LinkedHashMap<>();
 
-        if (modZip == null)
-        {
-            return map;
-        }
-        else
-        {
+        if (modZip != null) {
             ZipEntry zipentry = modZip.getEntry(pathConfig);
 
-            if (zipentry == null)
-            {
-                return map;
-            }
-            else
-            {
+            if (zipentry != null) {
                 InputStream inputstream = modZip.getInputStream(zipentry);
                 String[] astring = Utils.readLines(inputstream, "ASCII");
                 inputstream.close();
 
-                for (int i = 0; i < astring.length; ++i)
-                {
-                    String s = astring[i].trim();
+                for (String value : astring) {
+                    String s = value.trim();
 
-                    if (!s.startsWith("#") && s.length() > 0)
-                    {
+                    if (!s.startsWith("#") && s.length() > 0) {
                         String[] astring1 = Utils.tokenize(s, "=");
 
-                        if (astring1.length != 2)
-                        {
+                        if (astring1.length != 2) {
                             throw new IOException("Invalid patch configuration: " + s);
                         }
 
@@ -212,26 +166,21 @@
                     }
                 }
 
-                return map;
             }
         }
+        return map;
     }
 
-    public static String getPatchBase(String name, Pattern[] patterns, Map<String, String> cfgMap)
-    {
+    public static String getPatchBase(String name, Pattern[] patterns, Map<String, String> cfgMap) {
         name = Utils.removePrefix(name, "/");
 
-        for (int i = 0; i < patterns.length; ++i)
-        {
-            Pattern pattern = patterns[i];
+        for (Pattern pattern : patterns) {
             Matcher matcher = pattern.matcher(name);
 
-            if (matcher.matches())
-            {
+            if (matcher.matches()) {
                 String s = cfgMap.get(pattern.pattern());
 
-                if (s != null && s.trim().equals("*"))
-                {
+                if (s != null && s.trim().equals("*")) {
                     return name;
                 }
 
