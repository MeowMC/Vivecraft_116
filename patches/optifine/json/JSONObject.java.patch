--- a/optifine/json/JSONObject.java
+++ b/optifine/json/JSONObject.java
@@ -5,36 +5,26 @@
 import java.util.Iterator;
 import java.util.LinkedHashMap;
 import java.util.Map;
-import java.util.Map.Entry;
 
-public class JSONObject extends LinkedHashMap implements Map, JSONAware, JSONStreamAware
-{
+public class JSONObject extends LinkedHashMap implements Map, JSONAware, JSONStreamAware {
     private static final long serialVersionUID = -503443796854799292L;
 
-    public static void writeJSONString(Map map, Writer out) throws IOException
-    {
-        if (map == null)
-        {
+    public static void writeJSONString(Map map, Writer out) throws IOException {
+        if (map == null) {
             out.write("null");
-        }
-        else
-        {
+        } else {
             boolean flag = true;
             Iterator iterator = map.entrySet().iterator();
             out.write(123);
 
-            while (iterator.hasNext())
-            {
-                if (flag)
-                {
+            while (iterator.hasNext()) {
+                if (flag) {
                     flag = false;
-                }
-                else
-                {
+                } else {
                     out.write(44);
                 }
 
-                Entry entry = (Entry)iterator.next();
+                Entry entry = (Entry) iterator.next();
                 out.write(34);
                 out.write(escape(String.valueOf(entry.getKey())));
                 out.write(34);
@@ -46,36 +36,23 @@
         }
     }
 
-    public void writeJSONString(Writer out) throws IOException
-    {
-        writeJSONString(this, out);
-    }
-
-    public static String toJSONString(Map map)
-    {
-        if (map == null)
-        {
+    public static String toJSONString(Map map) {
+        if (map == null) {
             return "null";
-        }
-        else
-        {
+        } else {
             StringBuffer stringbuffer = new StringBuffer();
             boolean flag = true;
             Iterator iterator = map.entrySet().iterator();
             stringbuffer.append('{');
 
-            while (iterator.hasNext())
-            {
-                if (flag)
-                {
+            while (iterator.hasNext()) {
+                if (flag) {
                     flag = false;
-                }
-                else
-                {
+                } else {
                     stringbuffer.append(',');
                 }
 
-                Entry entry = (Entry)iterator.next();
+                Entry entry = (Entry) iterator.next();
                 toJSONString(String.valueOf(entry.getKey()), entry.getValue(), stringbuffer);
             }
 
@@ -84,21 +61,12 @@
         }
     }
 
-    public String toJSONString()
-    {
-        return toJSONString(this);
-    }
-
-    private static String toJSONString(String key, Object value, StringBuffer sb)
-    {
+    private static String toJSONString(String key, Object value, StringBuffer sb) {
         sb.append('"');
 
-        if (key == null)
-        {
+        if (key == null) {
             sb.append("null");
-        }
-        else
-        {
+        } else {
             JSONValue.escape(key, sb);
         }
 
@@ -107,20 +75,25 @@
         return sb.toString();
     }
 
-    public String toString()
-    {
-        return this.toJSONString();
-    }
-
-    public static String toString(String key, Object value)
-    {
+    public static String toString(String key, Object value) {
         StringBuffer stringbuffer = new StringBuffer();
         toJSONString(key, value, stringbuffer);
         return stringbuffer.toString();
     }
 
-    public static String escape(String s)
-    {
+    public static String escape(String s) {
         return JSONValue.escape(s);
     }
+
+    public void writeJSONString(Writer out) throws IOException {
+        writeJSONString(this, out);
+    }
+
+    public String toJSONString() {
+        return toJSONString(this);
+    }
+
+    public String toString() {
+        return this.toJSONString();
+    }
 }
