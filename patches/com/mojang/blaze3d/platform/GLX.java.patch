--- a/com/mojang/blaze3d/platform/GLX.java
+++ b/com/mojang/blaze3d/platform/GLX.java
@@ -4,11 +4,6 @@
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import com.mojang.blaze3d.systems.RenderSystem;
-import java.util.List;
-import java.util.Map;
-import java.util.function.Consumer;
-import java.util.function.LongSupplier;
-import java.util.function.Supplier;
 import net.minecraft.client.MainWindow;
 import net.minecraft.client.renderer.BufferBuilder;
 import net.minecraft.client.renderer.GlDebugTextUtils;
@@ -28,11 +23,14 @@
 import oshi.SystemInfo;
 import oshi.hardware.Processor;
 
-public class GLX
-{
+import java.util.List;
+import java.util.Map;
+import java.util.function.Consumer;
+import java.util.function.LongSupplier;
+import java.util.function.Supplier;
+
+public class GLX {
     private static final Logger LOGGER = LogManager.getLogger();
-    private static String capsString = "";
-    private static String cpuInfo;
     private static final Map<Integer, String> LOOKUP_MAP = make(Maps.newHashMap(), (p_lambda$static$0_0_) ->
     {
         p_lambda$static$0_0_.put(0, "No error");
@@ -45,20 +43,20 @@
         p_lambda$static$0_0_.put(1286, "Operation on incomplete framebuffer");
         p_lambda$static$0_0_.put(1286, "Operation on incomplete framebuffer");
     });
+    private static String capsString = "";
+    private static String cpuInfo;
+    public int intentionallModifyThisClassCauseItWontLoadProperlyFromOptifine = 69;
 
-    public static String getOpenGLVersionString()
-    {
+    public static String getOpenGLVersionString() {
         RenderSystem.assertThread(RenderSystem::isOnRenderThread);
         return GLFW.glfwGetCurrentContext() == 0L ? "NO CONTEXT" : GlStateManager.getString(7937) + " GL version " + GlStateManager.getString(7938) + ", " + GlStateManager.getString(7936);
     }
 
-    public static int _getRefreshRate(MainWindow p__getRefreshRate_0_)
-    {
+    public static int _getRefreshRate(MainWindow p__getRefreshRate_0_) {
         RenderSystem.assertThread(RenderSystem::isOnRenderThread);
         long i = GLFW.glfwGetWindowMonitor(p__getRefreshRate_0_.getHandle());
 
-        if (i == 0L)
-        {
+        if (i == 0L) {
             i = GLFW.glfwGetPrimaryMonitor();
         }
 
@@ -66,14 +64,12 @@
         return glfwvidmode == null ? 0 : glfwvidmode.refreshRate();
     }
 
-    public static String _getLWJGLVersion()
-    {
+    public static String _getLWJGLVersion() {
         RenderSystem.assertThread(RenderSystem::isInInitPhase);
         return Version.getVersion();
     }
 
-    public static LongSupplier _initGlfw()
-    {
+    public static LongSupplier _initGlfw() {
         RenderSystem.assertThread(RenderSystem::isInInitPhase);
         MainWindow.checkGlfwError((p_lambda$_initGlfw$1_0_, p_lambda$_initGlfw$1_1_) ->
         {
@@ -85,20 +81,16 @@
             list.add(String.format("GLFW error during init: [0x%X]%s", p_lambda$_initGlfw$2_1_, p_lambda$_initGlfw$2_2_));
         });
 
-        if (!GLFW.glfwInit())
-        {
+        if (!GLFW.glfwInit()) {
             throw new IllegalStateException("Failed to initialize GLFW, errors: " + Joiner.on(",").join(list));
-        }
-        else
-        {
+        } else {
             LongSupplier longsupplier = () ->
             {
-                return (long)(GLFW.glfwGetTime() * 1.0E9D);
+                return (long) (GLFW.glfwGetTime() * 1.0E9D);
             };
 
-            for (String s : list)
-            {
-                LOGGER.error("GLFW error collected during initialization: {}", (Object)s);
+            for (String s : list) {
+                LOGGER.error("GLFW error collected during initialization: {}", s);
             }
 
             RenderSystem.setErrorCallback(glfwerrorcallback);
@@ -106,70 +98,56 @@
         }
     }
 
-    public static void _setGlfwErrorCallback(GLFWErrorCallbackI p__setGlfwErrorCallback_0_)
-    {
+    public static void _setGlfwErrorCallback(GLFWErrorCallbackI p__setGlfwErrorCallback_0_) {
         RenderSystem.assertThread(RenderSystem::isInInitPhase);
         GLFWErrorCallback glfwerrorcallback = GLFW.glfwSetErrorCallback(p__setGlfwErrorCallback_0_);
 
-        if (glfwerrorcallback != null)
-        {
+        if (glfwerrorcallback != null) {
             glfwerrorcallback.free();
         }
     }
 
-    public static boolean _shouldClose(MainWindow p__shouldClose_0_)
-    {
+    public static boolean _shouldClose(MainWindow p__shouldClose_0_) {
         return GLFW.glfwWindowShouldClose(p__shouldClose_0_.getHandle());
     }
 
-    public static void _setupNvFogDistance()
-    {
+    public static void _setupNvFogDistance() {
         RenderSystem.assertThread(RenderSystem::isOnRenderThread);
 
-        if (GL.getCapabilities().GL_NV_fog_distance)
-        {
-            if (Config.isFogFancy())
-            {
+        if (GL.getCapabilities().GL_NV_fog_distance) {
+            if (Config.isFogFancy()) {
                 GlStateManager.fogi(34138, 34139);
             }
 
-            if (Config.isFogFast())
-            {
+            if (Config.isFogFast()) {
                 GlStateManager.fogi(34138, 34140);
             }
         }
     }
 
-    public static void _init(int p__init_0_, boolean p__init_1_)
-    {
+    public static void _init(int p__init_0_, boolean p__init_1_) {
         RenderSystem.assertThread(RenderSystem::isInInitPhase);
         GLCapabilities glcapabilities = GL.getCapabilities();
         capsString = "Using framebuffer using " + GlStateManager.init(glcapabilities);
 
-        try
-        {
+        try {
             Processor[] aprocessor = (new SystemInfo()).getHardware().getProcessors();
             cpuInfo = String.format("%dx %s", aprocessor.length, aprocessor[0]).replaceAll("\\s+", " ");
-        }
-        catch (Throwable throwable)
-        {
+        } catch (Throwable throwable) {
         }
 
         GlDebugTextUtils.setDebugVerbosity(p__init_0_, p__init_1_);
     }
 
-    public static String _getCapsString()
-    {
+    public static String _getCapsString() {
         return capsString;
     }
 
-    public static String _getCpuInfo()
-    {
+    public static String _getCpuInfo() {
         return cpuInfo == null ? "<unknown>" : cpuInfo;
     }
 
-    public static void _renderCrosshair(int p__renderCrosshair_0_, boolean p__renderCrosshair_1_, boolean p__renderCrosshair_2_, boolean p__renderCrosshair_3_)
-    {
+    public static void _renderCrosshair(int p__renderCrosshair_0_, boolean p__renderCrosshair_1_, boolean p__renderCrosshair_2_, boolean p__renderCrosshair_3_) {
         RenderSystem.assertThread(RenderSystem::isOnRenderThread);
         GlStateManager.disableTexture();
         GlStateManager.depthMask(false);
@@ -178,44 +156,38 @@
         GL11.glLineWidth(4.0F);
         bufferbuilder.begin(1, DefaultVertexFormats.POSITION_COLOR);
 
-        if (p__renderCrosshair_1_)
-        {
+        if (p__renderCrosshair_1_) {
             bufferbuilder.pos(0.0D, 0.0D, 0.0D).color(0, 0, 0, 255).endVertex();
-            bufferbuilder.pos((double)p__renderCrosshair_0_, 0.0D, 0.0D).color(0, 0, 0, 255).endVertex();
+            bufferbuilder.pos(p__renderCrosshair_0_, 0.0D, 0.0D).color(0, 0, 0, 255).endVertex();
         }
 
-        if (p__renderCrosshair_2_)
-        {
+        if (p__renderCrosshair_2_) {
             bufferbuilder.pos(0.0D, 0.0D, 0.0D).color(0, 0, 0, 255).endVertex();
-            bufferbuilder.pos(0.0D, (double)p__renderCrosshair_0_, 0.0D).color(0, 0, 0, 255).endVertex();
+            bufferbuilder.pos(0.0D, p__renderCrosshair_0_, 0.0D).color(0, 0, 0, 255).endVertex();
         }
 
-        if (p__renderCrosshair_3_)
-        {
+        if (p__renderCrosshair_3_) {
             bufferbuilder.pos(0.0D, 0.0D, 0.0D).color(0, 0, 0, 255).endVertex();
-            bufferbuilder.pos(0.0D, 0.0D, (double)p__renderCrosshair_0_).color(0, 0, 0, 255).endVertex();
+            bufferbuilder.pos(0.0D, 0.0D, p__renderCrosshair_0_).color(0, 0, 0, 255).endVertex();
         }
 
         tessellator.draw();
         GL11.glLineWidth(2.0F);
         bufferbuilder.begin(1, DefaultVertexFormats.POSITION_COLOR);
 
-        if (p__renderCrosshair_1_)
-        {
+        if (p__renderCrosshair_1_) {
             bufferbuilder.pos(0.0D, 0.0D, 0.0D).color(255, 0, 0, 255).endVertex();
-            bufferbuilder.pos((double)p__renderCrosshair_0_, 0.0D, 0.0D).color(255, 0, 0, 255).endVertex();
+            bufferbuilder.pos(p__renderCrosshair_0_, 0.0D, 0.0D).color(255, 0, 0, 255).endVertex();
         }
 
-        if (p__renderCrosshair_2_)
-        {
+        if (p__renderCrosshair_2_) {
             bufferbuilder.pos(0.0D, 0.0D, 0.0D).color(0, 255, 0, 255).endVertex();
-            bufferbuilder.pos(0.0D, (double)p__renderCrosshair_0_, 0.0D).color(0, 255, 0, 255).endVertex();
+            bufferbuilder.pos(0.0D, p__renderCrosshair_0_, 0.0D).color(0, 255, 0, 255).endVertex();
         }
 
-        if (p__renderCrosshair_3_)
-        {
+        if (p__renderCrosshair_3_) {
             bufferbuilder.pos(0.0D, 0.0D, 0.0D).color(127, 127, 255, 255).endVertex();
-            bufferbuilder.pos(0.0D, 0.0D, (double)p__renderCrosshair_0_).color(127, 127, 255, 255).endVertex();
+            bufferbuilder.pos(0.0D, 0.0D, p__renderCrosshair_0_).color(127, 127, 255, 255).endVertex();
         }
 
         tessellator.draw();
@@ -224,29 +196,24 @@
         GlStateManager.enableTexture();
     }
 
-    public static String getErrorString(int p_getErrorString_0_)
-    {
+    public static String getErrorString(int p_getErrorString_0_) {
         return LOOKUP_MAP.get(p_getErrorString_0_);
     }
 
-    public static <T> T make(Supplier<T> p_make_0_)
-    {
+    public static <T> T make(Supplier<T> p_make_0_) {
         return p_make_0_.get();
     }
 
-    public static <T> T make(T p_make_0_, Consumer<T> p_make_1_)
-    {
+    public static <T> T make(T p_make_0_, Consumer<T> p_make_1_) {
         p_make_1_.accept(p_make_0_);
         return p_make_0_;
     }
 
-    public static boolean isUsingFBOs()
-    {
+    public static boolean isUsingFBOs() {
         return !Config.isAntialiasing();
     }
 
-    public static boolean useVbo()
-    {
+    public static boolean useVbo() {
         return true;
     }
 }
